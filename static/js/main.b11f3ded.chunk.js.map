{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","useState","transform","setTransform","imgLength","length","sequenceNumberImg","width","transition","regimeDisabletNext","regimeDisabletPrev","className","style","map","elem","index","src","alt","height","type","onClick","newTransform","disabled","App","state","stepChange","frameSizeChange","itemWidthChange","duration","infiniteImg","handleChange","value","key","setState","prevState","handleInfiniteChange","this","htmlFor","id","min","max","onChange","e","parseInt","target","checked","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b11f3ded.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Carousel.scss';\n\ninterface Props {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  infinite,\n}) => {\n  const [transform, setTransform] = useState(0);\n  const imgLength = images.length;\n  const sequenceNumberImg = transform / itemWidth;\n  const handleNext = () => {\n    let newTransform = transform + step * itemWidth;\n\n    if (imgLength - (sequenceNumberImg + frameSize) < step) {\n      newTransform = (imgLength * itemWidth) - (frameSize * itemWidth);\n    }\n\n    if (sequenceNumberImg + frameSize >= imgLength && infinite) {\n      newTransform = 0;\n    }\n\n    setTransform(newTransform);\n  };\n\n  const handlePrev = () => {\n    let newTransform = transform - step * itemWidth;\n\n    if ((sequenceNumberImg - frameSize) < 0) {\n      newTransform = 0;\n    }\n\n    if (transform < 1 && infinite) {\n      newTransform = (imgLength - frameSize) * itemWidth;\n    }\n\n    setTransform(newTransform);\n  };\n\n  const width = `${itemWidth * frameSize}px`;\n  const transition = `all ${animationDuration}ms ease-in-out`;\n  const regimeDisabletNext = transform / itemWidth + frameSize >= images.length;\n  const regimeDisabletPrev = transform < 1;\n\n  return (\n    <div className=\"MainWrap\">\n      <div\n        className=\"Carousel\"\n        style={{ width, transition }}\n      >\n        <ul\n          className=\"Carousel__list\"\n          style={{\n            transform: `translateX(${-transform}px)`,\n            transition: `all ${animationDuration}ms ease-in-out`,\n          }}\n        >\n          {images.map((elem, index) => (\n            <li key={elem}>\n              <img\n                key={elem}\n                src={elem}\n                alt={`${index + 1}`}\n                className=\"Carousel__img\"\n                style={{\n                  width: `${itemWidth}px`,\n                  height: `${itemWidth}px`,\n                }}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"Carousel__buttons\">\n        <button\n          type=\"button\"\n          className=\"Carousel__button\"\n          onClick={handlePrev}\n          disabled={regimeDisabletPrev && !infinite}\n        >\n          {'< Prev'}\n        </button>\n        <button\n          type=\"button\"\n          className=\"Carousel__button\"\n          onClick={handleNext}\n          disabled={regimeDisabletNext && !infinite}\n        >\n          {'Next >'}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n  stepChange: number;\n  frameSizeChange: number;\n  itemWidthChange: number;\n  duration: number;\n  infiniteImg: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    stepChange: 3,\n    frameSizeChange: 3,\n    itemWidthChange: 130,\n    duration: 1000,\n    infiniteImg: false,\n  };\n\n  handleChange = (value: number, key: keyof State) => {\n    this.setState((prevState) => ({\n      ...prevState,\n      [key]: value,\n    }));\n  };\n\n  handleInfiniteChange = (value: boolean) => {\n    this.setState({ infiniteImg: value });\n  };\n\n  render() {\n    const {\n      images,\n      stepChange,\n      frameSizeChange,\n      itemWidthChange,\n      duration,\n      infiniteImg,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"App__title\">{`Carousel with ${images.length} images`}</h1>\n\n        <Carousel\n          images={images}\n          step={stepChange}\n          frameSize={frameSizeChange}\n          itemWidth={itemWidthChange}\n          animationDuration={duration}\n          infinite={infiniteImg}\n        />\n        <form>\n          <label htmlFor=\"step\">Choose a step:</label>\n          <input\n            id=\"step\"\n            min={2}\n            max={4}\n            type=\"number\"\n            onChange={(e) => {\n              this.handleChange(parseInt(e.target.value, 10), 'stepChange');\n            }}\n            value={stepChange}\n          />\n          <label htmlFor=\"frameSize\">Choose a size frame:</label>\n          <input\n            id=\"frameSize\"\n            min={2}\n            max={5}\n            type=\"number\"\n            onChange={(e) => {\n              this.handleChange(parseInt(\n                e.target.value,\n                10,\n              ), 'frameSizeChange');\n            }}\n            value={frameSizeChange}\n          />\n          <label htmlFor=\"itemWidth\">Choose a width item:</label>\n          <input\n            id=\"itemWidth\"\n            min={130}\n            max={150}\n            type=\"number\"\n            onChange={(e) => {\n              this.handleChange(parseInt(\n                e.target.value,\n                10,\n              ), 'itemWidthChange');\n            }}\n            value={itemWidthChange}\n          />\n          <label htmlFor=\"duration\">Choose a duration animation:</label>\n          <input\n            id=\"duration\"\n            type=\"number\"\n            min={1000}\n            max={5000}\n            step={50}\n            onChange={(e) => {\n              this.handleChange(parseInt(e.target.value, 10), 'duration');\n            }}\n            value={duration}\n          />\n          <label htmlFor=\"checkbox\">infinite</label>\n          <input\n            id=\"checkbox\"\n            type=\"checkbox\"\n            onChange={(e) => {\n              this.handleInfiniteChange(e.target.checked);\n            }}\n            checked={infiniteImg}\n          />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}