{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","useState","stepChange","setStepChange","frameSizeChange","setFrameSizeChange","itemWidthChange","setItemWidthChange","duration","setDuration","infiniteImg","setInfiniteImg","visibleIndex","setVisibleIndex","animationWidth","useEffect","wrapElement","document","querySelector","style","transition","transform","visiblePhoto","slice","className","map","elem","index","src","alt","width","height","type","onClick","length","disabled","newIndex","htmlFor","id","min","max","onChange","e","parseInt","target","value","newFrameSize","checked","App","state","this","React","Component","ReactDOM","render","getElementById"],"mappings":"gQA2KeA,EA/JmB,SAAC,GAO5B,IANLC,EAMI,EANJA,OACAC,EAKI,EALJA,KACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,kBACAC,EACI,EADJA,SAEA,EAAoCC,mBAASL,GAA7C,mBAAOM,EAAP,KAAmBC,EAAnB,KACA,EAA8CF,mBAASJ,GAAvD,mBAAOO,EAAP,KAAwBC,EAAxB,KACA,EAA8CJ,mBAASH,GAAvD,mBAAOQ,EAAP,KAAwBC,EAAxB,KACA,EAAgCN,mBAASF,GAAzC,mBAAOS,EAAP,KAAiBC,EAAjB,KACA,EAAsCR,mBAASD,GAA/C,mBAAOU,EAAP,KAAoBC,EAApB,KACA,EAAwCV,mBAAS,GAAjD,mBAAOW,EAAP,KAAqBC,EAArB,KACIC,EAAiB,EAsCrBC,qBAAU,WACR,IAAMC,EAAcC,SAASC,cAAc,aAEvCF,IACFA,EAAYG,MAAMC,WAAlB,cAAsCZ,EAAtC,kBACAQ,EAAYG,MAAME,UAAlB,qBAA4CP,EAA5C,UAED,CAACR,EAAiBE,IAErB,IAAMc,EAAe3B,EAAO4B,MAC1BX,EAAcA,EAAeR,GAI/B,OACE,sBAAKoB,UAAU,WAAf,UACE,qBAAKA,UAAU,WAAf,SACE,oBAAIA,UAAU,iBAAd,SACGF,EAAaG,KAAI,SAACC,EAAMC,GAAP,OAChB,6BACE,qBAEEC,IAAKF,EACLG,IAAG,UAAKF,EAAQ,GAChBH,UAAU,gBACVL,MAAO,CAAEW,MAAM,GAAD,OAAKxB,EAAL,MAA0ByB,OAAO,GAAD,OAAKzB,EAAL,QAJzCoB,IAFAA,UAYf,sBAAKF,UAAU,oBAAf,UACE,wBACEQ,KAAK,SACLR,UAAU,mBACVS,QAxDW,WAGjBpB,EAFkBD,EAAeV,GAGjCY,GAAmBR,EACdM,EAAeR,EAAmB,GACrCS,EAAiB,GAGfD,EAAe,GACjBC,EAAgBlB,EAAOuC,OAAS9B,IA+C5B+B,SAA2B,IAAjBvB,IAAuBF,EAJnC,SAMG,WAEH,wBACEsB,KAAK,SACLR,UAAU,mBACVS,QA/EW,WACjB,IAAMG,GAAYxB,EAAeV,GAAcP,EAAOuC,OAEtDrB,EAAgBuB,GAChBtB,EAAkBR,EAEdX,EAAOuC,QAAUtB,EAAeR,GAAmBF,GACrDW,EAAiBlB,EAAOuC,OAAShC,GAG/BU,EAAeR,IAAoBT,EAAOuC,QAC5CrB,EAAgB,IAqEZsB,SAAUvB,GAAgBjB,EAAOuC,OAAShC,IAAeQ,EAJ3D,SAMG,cAGL,qBAAKc,UAAU,6BAAf,SACE,iCACE,uBAAOa,QAAQ,OAAf,4BACA,uBACEC,GAAG,OACHC,IAAK,EACLC,IAAK,EACLR,KAAK,SACLS,SAAU,SAACC,GACTvC,EAAcwC,SAASD,EAAEE,OAAOC,MAAO,KACvChC,EAAgB,IAElBgC,MAAO3C,IAET,uBAAOmC,QAAQ,YAAf,kCACA,uBACEC,GAAG,YACHC,IAAK,EACLC,IAAK,EACLR,KAAK,SACLS,SA5EoB,SAACC,GAC7B,IAAMI,EAAeH,SAASD,EAAEE,OAAOC,MAAO,IAE9CxC,EAAmByC,GACnBjC,EAAgB,IAyERgC,MAAOzC,IAET,uBAAOiC,QAAQ,YAAf,kCACA,uBACEC,GAAG,YACHC,IAAK,IACLC,IAAK,IACLR,KAAK,SACLS,SAAU,SAACC,GAAD,OAAOnC,EAAmBoC,SAASD,EAAEE,OAAOC,MAAO,MAC7DA,MAAOvC,IAET,uBAAO+B,QAAQ,WAAf,0CACA,uBACEC,GAAG,WACHN,KAAK,SACLO,IAAK,IACLC,IAAK,IACL5C,KAAM,GACN6C,SAAU,SAACC,GAAD,OAAOjC,EAAYkC,SAASD,EAAEE,OAAOC,MAAO,MACtDA,MAAOrC,IAET,uBAAO6B,QAAQ,WAAf,sBACA,uBACEC,GAAG,WACHN,KAAK,WACLS,SAAU,SAACC,GACT/B,EAAe+B,EAAEE,OAAOG,SACxBlC,EAAgB,IAElBkC,QAASrC,aC3JfsC,E,4MACJC,MAAQ,CACNtD,OAAQ,CACN,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,iB,4CAIJ,WACE,IAAQA,EAAWuD,KAAKD,MAAhBtD,OAER,OACE,sBAAK6B,UAAU,MAAf,UACE,oBAAIA,UAAU,aAAd,iCAA6C7B,EAAOuC,OAApD,aAEA,cAAC,EAAD,CACEvC,OAAQA,EACRC,KAAM,EACNC,UAAW,EACXC,UAAW,IACXC,kBAAmB,IACnBC,UAAU,W,GA7BFmD,IAAMC,WAoCTJ,ICzCfK,IAASC,OAAO,cAAC,EAAD,IAASrC,SAASsC,eAAe,W","file":"static/js/main.94005f38.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Carousel.scss';\n\ninterface Props {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  infinite,\n}) => {\n  const [stepChange, setStepChange] = useState(step);\n  const [frameSizeChange, setFrameSizeChange] = useState(frameSize);\n  const [itemWidthChange, setItemWidthChange] = useState(itemWidth);\n  const [duration, setDuration] = useState(animationDuration);\n  const [infiniteImg, setInfiniteImg] = useState(infinite);\n  const [visibleIndex, setVisibleIndex] = useState(0);\n  let animationWidth = 0;\n\n  const handleNext = () => {\n    const newIndex = (visibleIndex + stepChange) % images.length;\n\n    setVisibleIndex(newIndex);\n    animationWidth = (itemWidthChange);\n\n    if (images.length - (visibleIndex + frameSizeChange) < stepChange) {\n      setVisibleIndex((images.length - stepChange));\n    }\n\n    if (visibleIndex + frameSizeChange === images.length) {\n      setVisibleIndex(0);\n    }\n  };\n\n  const handlePrev = () => {\n    const newIndex = (visibleIndex - stepChange);\n\n    setVisibleIndex(newIndex);\n    animationWidth = (-itemWidthChange);\n    if ((visibleIndex - frameSizeChange) < 0) {\n      setVisibleIndex((0));\n    }\n\n    if (visibleIndex < 1) {\n      setVisibleIndex(images.length - frameSizeChange);\n    }\n  };\n\n  const handleFrameSizeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newFrameSize = parseInt(e.target.value, 10);\n\n    setFrameSizeChange(newFrameSize);\n    setVisibleIndex(0);\n  };\n\n  useEffect(() => {\n    const wrapElement = document.querySelector('.Carousel') as HTMLElement;\n\n    if (wrapElement) {\n      wrapElement.style.transition = `all ${duration}ms ease-in-out`;\n      wrapElement.style.transform = `translateX(${animationWidth}px)`;\n    }\n  }, [itemWidthChange, duration]);\n\n  const visiblePhoto = images.slice(\n    visibleIndex, visibleIndex + frameSizeChange,\n\n  );\n\n  return (\n    <div className=\"MainWrap\">\n      <div className=\"Carousel\">\n        <ul className=\"Carousel__list\">\n          {visiblePhoto.map((elem, index) => (\n            <li key={elem}>\n              <img\n                key={elem}\n                src={elem}\n                alt={`${index + 1}`}\n                className=\"Carousel__img\"\n                style={{ width: `${itemWidthChange}px`, height: `${itemWidthChange}px` }}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"Carousel__buttons\">\n        <button\n          type=\"button\"\n          className=\"Carousel__button\"\n          onClick={handlePrev}\n          disabled={visibleIndex === 0 && !infiniteImg}\n        >\n          {'< Prev'}\n        </button>\n        <button\n          type=\"button\"\n          className=\"Carousel__button\"\n          onClick={handleNext}\n          disabled={visibleIndex >= images.length - stepChange && !infiniteImg}\n        >\n          {'Next >'}\n        </button>\n      </div>\n      <div className=\"Carousel__interactionForms\">\n        <form>\n          <label htmlFor=\"step\">Choose a step:</label>\n          <input\n            id=\"step\"\n            min={2}\n            max={4}\n            type=\"number\"\n            onChange={(e) => {\n              setStepChange(parseInt(e.target.value, 10));\n              setVisibleIndex(0);\n            }}\n            value={stepChange}\n          />\n          <label htmlFor=\"frameSize\">Choose a size frame:</label>\n          <input\n            id=\"frameSize\"\n            min={2}\n            max={5}\n            type=\"number\"\n            onChange={handleFrameSizeChange}\n            value={frameSizeChange}\n          />\n          <label htmlFor=\"itemWidth\">Choose a width item:</label>\n          <input\n            id=\"itemWidth\"\n            min={130}\n            max={150}\n            type=\"number\"\n            onChange={(e) => setItemWidthChange(parseInt(e.target.value, 10))}\n            value={itemWidthChange}\n          />\n          <label htmlFor=\"duration\">Choose a duration animation:</label>\n          <input\n            id=\"duration\"\n            type=\"number\"\n            min={1000}\n            max={5000}\n            step={50}\n            onChange={(e) => setDuration(parseInt(e.target.value, 10))}\n            value={duration}\n          />\n          <label htmlFor=\"checkbox\">infinite</label>\n          <input\n            id=\"checkbox\"\n            type=\"checkbox\"\n            onChange={(e) => {\n              setInfiniteImg(e.target.checked);\n              setVisibleIndex(0);\n            }}\n            checked={infiniteImg}\n          />\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n  };\n\n  render() {\n    const { images } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"App__title\">{`Carousel with ${images.length} images`}</h1>\n\n        <Carousel\n          images={images}\n          step={3}\n          frameSize={3}\n          itemWidth={130}\n          animationDuration={1000}\n          infinite={false}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}