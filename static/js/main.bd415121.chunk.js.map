{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","useState","transform","setTransform","useEffect","wrapElement","document","querySelector","style","width","transition","className","map","elem","index","src","alt","height","type","onClick","newTransform","length","disabled","App","state","stepChange","frameSizeChange","itemWidthChange","duration","infiniteImg","handleStepChange","value","setState","handleFrameSizeChange","handleItemWidthChange","handleDurationChange","handleInfiniteChange","this","htmlFor","id","min","max","onChange","e","parseInt","target","checked","React","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.bd415121.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Carousel.scss';\n\ninterface Props {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  infinite,\n}) => {\n  const [transform, setTransform] = useState(0);\n  const handleNext = () => {\n    let newTransform = transform + step * itemWidth;\n\n    if (images.length - (transform / itemWidth + frameSize) < step) {\n      newTransform = (images.length * itemWidth) - (frameSize * itemWidth);\n    }\n\n    if (transform / itemWidth + frameSize >= images.length && infinite) {\n      newTransform = 0;\n    }\n\n    setTransform(newTransform);\n  };\n\n  const handlePrev = () => {\n    let newTransform = transform - step * itemWidth;\n\n    if ((transform / itemWidth - frameSize) < 0) {\n      newTransform = 0;\n    }\n\n    if (transform < 1 && infinite) {\n      newTransform = (images.length - frameSize) * itemWidth;\n    }\n\n    setTransform(newTransform);\n  };\n\n  useEffect(() => {\n    const wrapElement = document.querySelector('.Carousel') as HTMLElement;\n\n    wrapElement.style.width = `${itemWidth * frameSize}px`;\n    wrapElement.style.transition = `all ${animationDuration}ms ease-in-out`;\n  }, [step, frameSize, itemWidth, animationDuration]);\n\n  return (\n    <div className=\"MainWrap\">\n      <div\n        className=\"Carousel\"\n        style={{ width: `${itemWidth * frameSize}px` }}\n      >\n        <ul\n          className=\"Carousel__list\"\n          style={{\n            transform: `translateX(${-transform}px)`,\n            transition: `all ${animationDuration}ms ease-in-out`,\n          }}\n        >\n          {images.map((elem, index) => (\n            <li key={elem}>\n              <img\n                key={elem}\n                src={elem}\n                alt={`${index + 1}`}\n                className=\"Carousel__img\"\n                style={{\n                  width: `${itemWidth}px`,\n                  height: `${itemWidth}px`,\n                }}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"Carousel__buttons\">\n        <button\n          type=\"button\"\n          className=\"Carousel__button\"\n          onClick={handlePrev}\n          disabled={transform < 1 && !infinite}\n        >\n          {'< Prev'}\n        </button>\n        <button\n          type=\"button\"\n          className=\"Carousel__button\"\n          onClick={handleNext}\n          disabled={\n            transform / itemWidth + frameSize >= images.length && !infinite\n          }\n        >\n          {'Next >'}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n  stepChange: number;\n  frameSizeChange: number;\n  itemWidthChange: number;\n  duration: number;\n  infiniteImg: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    stepChange: 3,\n    frameSizeChange: 3,\n    itemWidthChange: 130,\n    duration: 1000,\n    infiniteImg: false,\n  };\n\n  handleStepChange = (value: number) => {\n    this.setState({ stepChange: value });\n  };\n\n  handleFrameSizeChange = (value: number) => {\n    this.setState({ frameSizeChange: value });\n  };\n\n  handleItemWidthChange = (value: number) => {\n    this.setState({ itemWidthChange: value });\n  };\n\n  handleDurationChange = (value: number) => {\n    this.setState({ duration: value });\n  };\n\n  handleInfiniteChange = (value: boolean) => {\n    this.setState({ infiniteImg: value });\n  };\n\n  render() {\n    const {\n      images,\n      stepChange,\n      frameSizeChange,\n      itemWidthChange,\n      duration,\n      infiniteImg,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"App__title\">{`Carousel with ${images.length} images`}</h1>\n\n        <Carousel\n          images={images}\n          step={stepChange}\n          frameSize={frameSizeChange}\n          itemWidth={itemWidthChange}\n          animationDuration={duration}\n          infinite={infiniteImg}\n        />\n        <form>\n          <label htmlFor=\"step\">Choose a step:</label>\n          <input\n            id=\"step\"\n            min={2}\n            max={4}\n            type=\"number\"\n            onChange={(e) => {\n              this.handleStepChange(parseInt(e.target.value, 10));\n            }}\n            value={stepChange}\n          />\n          <label htmlFor=\"frameSize\">Choose a size frame:</label>\n          <input\n            id=\"frameSize\"\n            min={2}\n            max={5}\n            type=\"number\"\n            onChange={(e) => {\n              this.handleFrameSizeChange(parseInt(e.target.value, 10));\n            }}\n            value={frameSizeChange}\n          />\n          <label htmlFor=\"itemWidth\">Choose a width item:</label>\n          <input\n            id=\"itemWidth\"\n            min={130}\n            max={150}\n            type=\"number\"\n            onChange={(e) => {\n              this.handleItemWidthChange(parseInt(e.target.value, 10));\n            }}\n            value={itemWidthChange}\n          />\n          <label htmlFor=\"duration\">Choose a duration animation:</label>\n          <input\n            id=\"duration\"\n            type=\"number\"\n            min={1000}\n            max={5000}\n            step={50}\n            onChange={(e) => {\n              this.handleDurationChange(parseInt(e.target.value, 10));\n            }}\n            value={duration}\n          />\n          <label htmlFor=\"checkbox\">infinite</label>\n          <input\n            id=\"checkbox\"\n            type=\"checkbox\"\n            onChange={(e) => {\n              this.handleInfiniteChange(e.target.checked);\n            }}\n            checked={infiniteImg}\n          />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}